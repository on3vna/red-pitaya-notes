# Create xlslice
cell xilinx.com:ip:xlslice:1.0 slice_0 {
  DIN_WIDTH 128 DIN_FROM 0 DIN_TO 0 DOUT_WIDTH 1
}

# Create xlslice
cell xilinx.com:ip:xlslice:1.0 slice_1 {
  DIN_WIDTH 128 DIN_FROM 1 DIN_TO 1 DOUT_WIDTH 1
}

# Create xlslice
cell xilinx.com:ip:xlslice:1.0 slice_2 {
  DIN_WIDTH 128 DIN_FROM 2 DIN_TO 2 DOUT_WIDTH 1
}

# Create xlslice
cell xilinx.com:ip:xlslice:1.0 slice_3 {
  DIN_WIDTH 128 DIN_FROM 63 DIN_TO 32 DOUT_WIDTH 32
}

# Create axis_clock_converter
cell xilinx.com:ip:axis_clock_converter:1.1 fifo_0 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 8
} {
  m_axis_aclk /ps_0/FCLK_CLK0
  m_axis_aresetn slice_0/Dout
}

# Create axis_broadcaster
cell xilinx.com:ip:axis_broadcaster:1.1 bcast_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 8
  M_TDATA_NUM_BYTES 2
  NUM_MI 3
  M00_TDATA_REMAP {tdata[15:0]}
  M01_TDATA_REMAP {tdata[31:16]}
  M02_TDATA_REMAP {tdata[47:32]}
} {
  S_AXIS fifo_0/M_AXIS
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

# Create axi_axis_writer
cell pavel-demin:user:axi_axis_writer:1.0 writer_0 {
  AXI_DATA_WIDTH 32
} {
  aclk /ps_0/FCLK_CLK0
  aresetn /rst_0/peripheral_aresetn
}

# Create axis_data_fifo
cell xilinx.com:ip:axis_data_fifo:1.1 fifo_1 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 4
  FIFO_DEPTH 16384
} {
  S_AXIS writer_0/M_AXIS
  s_axis_aclk /ps_0/FCLK_CLK0
  s_axis_aresetn slice_1/Dout
}

# Create axis_interpolator
cell pavel-demin:user:axis_interpolator:1.0 inter_0 {
  AXIS_TDATA_WIDTH 32
  CNTR_WIDTH 32
} {
  S_AXIS fifo_1/M_AXIS
  cfg_data slice_3/Dout
  aclk /ps_0/FCLK_CLK0
  aresetn slice_1/Dout
}

# Create axis_broadcaster
cell xilinx.com:ip:axis_broadcaster:1.1 bcast_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 4
  NUM_MI 3
  M00_TDATA_REMAP {tdata[31:0]}
  M01_TDATA_REMAP {tdata[31:0]}
  M02_TDATA_REMAP {tdata[31:0]}
} {
  S_AXIS inter_0/M_AXIS
  aclk /ps_0/FCLK_CLK0
  aresetn slice_1/Dout
}

for {set i 0} {$i <= 2} {incr i} {

  # Create dds_compiler
  cell xilinx.com:ip:dds_compiler:6.0 dds_$i {
    DDS_CLOCK_RATE 125
    SPURIOUS_FREE_DYNAMIC_RANGE 138
    FREQUENCY_RESOLUTION 0.2
    PHASE_INCREMENT Streaming
    HAS_TREADY true
    HAS_ARESETN true
    HAS_PHASE_OUT false
    PHASE_WIDTH 30
    OUTPUT_WIDTH 24
    DSP48_USE Minimal
    NEGATIVE_SINE true
  } {
    S_AXIS_PHASE bcast_1/M0${i}_AXIS
    aclk /ps_0/FCLK_CLK0
    aresetn slice_0/Dout
  }

  # Create axis_lfsr
  cell pavel-demin:user:axis_lfsr:1.0 lfsr_$i {} {
    aclk /ps_0/FCLK_CLK0
    aresetn /rst_0/peripheral_aresetn
  }

  # Create cmpy
  cell xilinx.com:ip:cmpy:6.0 mult_$i {
    FLOWCONTROL Blocking
    APORTWIDTH.VALUE_SRC USER
    BPORTWIDTH.VALUE_SRC USER
    APORTWIDTH 14
    BPORTWIDTH 24
    ROUNDMODE Random_Rounding
    OUTPUTWIDTH 25
  } {
    S_AXIS_A bcast_0/M0${i}_AXIS
    S_AXIS_B dds_$i/M_AXIS_DATA
    S_AXIS_CTRL lfsr_$i/M_AXIS
    aclk /ps_0/FCLK_CLK0
  }

  # Create axis_broadcaster
  cell xilinx.com:ip:axis_broadcaster:1.1 bcast_[expr $i + 2] {
    S_TDATA_NUM_BYTES.VALUE_SRC USER
    M_TDATA_NUM_BYTES.VALUE_SRC USER
    S_TDATA_NUM_BYTES 8
    M_TDATA_NUM_BYTES 3
    M00_TDATA_REMAP {tdata[23:0]}
    M01_TDATA_REMAP {tdata[55:32]}
  } {
    S_AXIS mult_$i/M_AXIS_DOUT
    aclk /ps_0/FCLK_CLK0
    aresetn slice_0/Dout
  }

}

for {set i 0} {$i <= 5} {incr i} {

  # Create cic_compiler
  cell xilinx.com:ip:cic_compiler:4.0 cic_$i {
    INPUT_DATA_WIDTH.VALUE_SRC USER
    FILTER_TYPE Decimation
    NUMBER_OF_STAGES 6
    SAMPLE_RATE_CHANGES Fixed
    FIXED_OR_INITIAL_RATE 250
    INPUT_SAMPLE_FREQUENCY 125
    CLOCK_FREQUENCY 125
    INPUT_DATA_WIDTH 24
    QUANTIZATION Truncation
    OUTPUT_DATA_WIDTH 24
    USE_XTREME_DSP_SLICE false
    HAS_DOUT_TREADY true
    HAS_ARESETN true
  } {
    S_AXIS_DATA bcast_[expr $i / 2 + 2]/M0[expr $i % 2]_AXIS
    aclk /ps_0/FCLK_CLK0
    aresetn slice_0/Dout
  }

}

# Create axis_combiner
cell  xilinx.com:ip:axis_combiner:1.1 comb_0 {
  TDATA_NUM_BYTES.VALUE_SRC USER
  TDATA_NUM_BYTES 3
  NUM_SI 6
} {
  S00_AXIS cic_0/M_AXIS_DATA
  S01_AXIS cic_1/M_AXIS_DATA
  S02_AXIS cic_2/M_AXIS_DATA
  S03_AXIS cic_3/M_AXIS_DATA
  S04_AXIS cic_4/M_AXIS_DATA
  S05_AXIS cic_5/M_AXIS_DATA
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter:1.1 conv_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 18
  M_TDATA_NUM_BYTES 3
} {
  S_AXIS comb_0/M_AXIS
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

# Create fir_compiler
cell xilinx.com:ip:fir_compiler:7.2 fir_0 {
  DATA_WIDTH.VALUE_SRC USER
  DATA_WIDTH 24
  COEFFICIENTVECTOR {-1.6477762430e-08, -4.7323735250e-08, -7.9369977924e-10, 3.0935014603e-08, 1.8628248752e-08, 3.2749529808e-08, -6.3005529855e-09, -1.5228426770e-07, -8.3046520501e-08, 3.1454462806e-07, 3.0563257079e-07, -4.7418669167e-07, -7.1351118892e-07, 5.4734076220e-07, 1.3346539675e-06, -4.1415512958e-07, -2.1505634366e-06, -6.7738013482e-08, 3.0755424841e-06, 1.0370435738e-06, -3.9444645097e-06, -2.5919733402e-06, 4.5154910427e-06, 4.7479407546e-06, -4.4929581492e-06, -7.3984284256e-06, 3.5722551695e-06, 1.0289787245e-05, -1.5038586943e-06, -1.3021191410e-05, -1.8321256852e-06, 1.5078532538e-05, 6.3548130492e-06, -1.5906084996e-05, -1.1732784651e-05, 1.5011377339e-05, 1.7372427169e-05, -1.2094632459e-05, -2.2467454951e-05, 7.1698877392e-06, 2.6103926120e-05, -6.6354361002e-07, -2.7429958377e-05, -6.5508496012e-06, 2.5864975493e-05, 1.3204718099e-05, -2.1317518080e-05, -1.7790536000e-05, 1.4366675559e-05, 1.8820188981e-05, -6.3577333776e-06, -1.5162896814e-05, -6.3472001224e-07, 6.4159234667e-06, 4.0080762130e-06, 6.7578010229e-06, -1.0056094771e-06, -2.2403668894e-05, -1.0762694053e-05, 3.7234461415e-05, 3.2701446613e-05, -4.6861895458e-05, -6.4654126292e-05, 4.6261400945e-05, 1.0440438020e-04, -3.0541445890e-05, -1.4746086674e-04, -4.1199460566e-06, 1.8719063690e-04, 5.9473498923e-05, -2.1538040831e-04, -1.3430520335e-04, 2.2322987601e-04, 2.2384072982e-04, -2.0270585804e-04, -3.1963160764e-04, 1.4810001591e-04, 4.1006056982e-04, -5.7561251258e-05, -4.8152699544e-04, -6.5678036828e-05, 5.2026392092e-04, 2.1266968086e-04, -5.1463138181e-04, -3.6901536825e-04, 4.5747842517e-04, 5.1598690140e-04, -3.4848598010e-04, -6.3289740108e-04, 1.9565369588e-04, 7.0020637949e-04, -1.5798348711e-05, -7.0322277411e-04, -1.6638245822e-04, 6.3585913829e-04, 3.2084205938e-04, -5.0382238038e-04, -4.1626750662e-04, 3.2657613801e-04, 4.2540406674e-04, -1.3746762414e-04, -3.3105467877e-04, -1.8436160310e-05, 1.3195647406e-04, 8.8997587335e-05, 1.5241096273e-04, -2.2010765942e-05, -4.7912318906e-04, -2.2616041330e-04, 7.8161877579e-04, 6.8034958082e-04, -9.7387021277e-04, -1.3374614515e-03, 9.5753459440e-04, 2.1582902561e-03, -6.3308010606e-04, -3.0624721296e-03, -8.6273701002e-05, 3.9275916959e-03, 1.2589269766e-03, -4.5933184963e-03, -2.8991327134e-03, 4.8709336091e-03, 4.9628375082e-03, -4.5579979864e-03, -7.3368539887e-03, 3.4572516756e-03, 9.8327810021e-03, -1.3982276485e-03, -1.2186467272e-02, -1.7403904793e-03, 1.4062631016e-02, 6.0086942597e-03, -1.5065943879e-02, -1.1370436529e-02, 1.4748709897e-02, 1.7687681922e-02, -1.2618811687e-02, -2.4713793288e-02, 8.1310581064e-03, 3.2087272872e-02, -6.4509304599e-04, -3.9318006944e-02, -1.0692782064e-02, 4.5737709605e-02, 2.7250996648e-02, -5.0322543709e-02, -5.1717307930e-02, 5.1020434896e-02, 9.0573295427e-02, -4.1608627767e-02, -1.6375162082e-01, -1.0802051708e-02, 3.5639418629e-01, 5.5482689595e-01, 3.5639418629e-01, -1.0802051708e-02, -1.6375162082e-01, -4.1608627767e-02, 9.0573295427e-02, 5.1020434896e-02, -5.1717307930e-02, -5.0322543709e-02, 2.7250996648e-02, 4.5737709605e-02, -1.0692782064e-02, -3.9318006944e-02, -6.4509304599e-04, 3.2087272872e-02, 8.1310581064e-03, -2.4713793288e-02, -1.2618811687e-02, 1.7687681922e-02, 1.4748709897e-02, -1.1370436529e-02, -1.5065943879e-02, 6.0086942597e-03, 1.4062631016e-02, -1.7403904793e-03, -1.2186467272e-02, -1.3982276485e-03, 9.8327810021e-03, 3.4572516756e-03, -7.3368539887e-03, -4.5579979864e-03, 4.9628375082e-03, 4.8709336091e-03, -2.8991327134e-03, -4.5933184963e-03, 1.2589269766e-03, 3.9275916959e-03, -8.6273701002e-05, -3.0624721296e-03, -6.3308010606e-04, 2.1582902561e-03, 9.5753459440e-04, -1.3374614515e-03, -9.7387021277e-04, 6.8034958082e-04, 7.8161877579e-04, -2.2616041330e-04, -4.7912318906e-04, -2.2010765942e-05, 1.5241096273e-04, 8.8997587335e-05, 1.3195647406e-04, -1.8436160310e-05, -3.3105467877e-04, -1.3746762414e-04, 4.2540406674e-04, 3.2657613801e-04, -4.1626750662e-04, -5.0382238038e-04, 3.2084205938e-04, 6.3585913829e-04, -1.6638245822e-04, -7.0322277411e-04, -1.5798348711e-05, 7.0020637949e-04, 1.9565369588e-04, -6.3289740108e-04, -3.4848598010e-04, 5.1598690140e-04, 4.5747842517e-04, -3.6901536825e-04, -5.1463138181e-04, 2.1266968086e-04, 5.2026392092e-04, -6.5678036828e-05, -4.8152699544e-04, -5.7561251258e-05, 4.1006056982e-04, 1.4810001591e-04, -3.1963160764e-04, -2.0270585804e-04, 2.2384072982e-04, 2.2322987601e-04, -1.3430520335e-04, -2.1538040831e-04, 5.9473498923e-05, 1.8719063690e-04, -4.1199460566e-06, -1.4746086674e-04, -3.0541445890e-05, 1.0440438020e-04, 4.6261400945e-05, -6.4654126292e-05, -4.6861895458e-05, 3.2701446613e-05, 3.7234461415e-05, -1.0762694053e-05, -2.2403668894e-05, -1.0056094771e-06, 6.7578010229e-06, 4.0080762130e-06, 6.4159234667e-06, -6.3472001224e-07, -1.5162896814e-05, -6.3577333776e-06, 1.8820188981e-05, 1.4366675559e-05, -1.7790536000e-05, -2.1317518080e-05, 1.3204718099e-05, 2.5864975493e-05, -6.5508496012e-06, -2.7429958377e-05, -6.6354361002e-07, 2.6103926120e-05, 7.1698877392e-06, -2.2467454951e-05, -1.2094632459e-05, 1.7372427169e-05, 1.5011377339e-05, -1.1732784651e-05, -1.5906084996e-05, 6.3548130492e-06, 1.5078532538e-05, -1.8321256852e-06, -1.3021191410e-05, -1.5038586943e-06, 1.0289787245e-05, 3.5722551695e-06, -7.3984284256e-06, -4.4929581492e-06, 4.7479407546e-06, 4.5154910427e-06, -2.5919733402e-06, -3.9444645097e-06, 1.0370435738e-06, 3.0755424841e-06, -6.7738013482e-08, -2.1505634366e-06, -4.1415512958e-07, 1.3346539675e-06, 5.4734076220e-07, -7.1351118892e-07, -4.7418669167e-07, 3.0563257079e-07, 3.1454462806e-07, -8.3046520501e-08, -1.5228426770e-07, -6.3005529855e-09, 3.2749529808e-08, 1.8628248752e-08, 3.0935014603e-08, -7.9369977924e-10, -4.7323735250e-08, -1.6477762430e-08}
  COEFFICIENT_WIDTH 24
  QUANTIZATION Maximize_Dynamic_Range
  BESTPRECISION true
  FILTER_TYPE Decimation
  DECIMATION_RATE 2
  NUMBER_CHANNELS 6
  NUMBER_PATHS 1
  SAMPLE_FREQUENCY 0.5
  CLOCK_FREQUENCY 125
  OUTPUT_ROUNDING_MODE Convergent_Rounding_to_Even
  OUTPUT_WIDTH 25
  M_DATA_HAS_TREADY true
  HAS_ARESETN true
} {
  S_AXIS_DATA conv_0/M_AXIS
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

# Create axis_subset_converter
cell xilinx.com:ip:axis_subset_converter:1.1 subset_0 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 3
  TDATA_REMAP {tdata[23:0]}
} {
  S_AXIS fir_0/M_AXIS_DATA
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

# Create floating_point
cell xilinx.com:ip:floating_point:7.1 fp_0 {
  OPERATION_TYPE Fixed_to_float
  A_PRECISION_TYPE.VALUE_SRC USER
  C_A_EXPONENT_WIDTH.VALUE_SRC USER
  C_A_FRACTION_WIDTH.VALUE_SRC USER
  A_PRECISION_TYPE Custom
  C_A_EXPONENT_WIDTH 2
  C_A_FRACTION_WIDTH 22
  RESULT_PRECISION_TYPE Single
  HAS_ARESETN true
} {
  S_AXIS_A subset_0/M_AXIS
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

# Create axis_dwidth_converter
cell xilinx.com:ip:axis_dwidth_converter:1.1 conv_1 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 4
  M_TDATA_NUM_BYTES 24
} {
  S_AXIS fp_0/M_AXIS_RESULT
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

# Create axis_broadcaster
cell xilinx.com:ip:axis_broadcaster:1.1 bcast_5 {
  S_TDATA_NUM_BYTES.VALUE_SRC USER
  M_TDATA_NUM_BYTES.VALUE_SRC USER
  S_TDATA_NUM_BYTES 24
  M_TDATA_NUM_BYTES 8
  NUM_MI 3
  M00_TDATA_REMAP {tdata[31:0],tdata[63:32]}
  M01_TDATA_REMAP {tdata[95:64],tdata[127:96]}
  M02_TDATA_REMAP {tdata[159:128],tdata[191:160]}
} {
  S_AXIS conv_1/M_AXIS
  aclk /ps_0/FCLK_CLK0
  aresetn slice_0/Dout
}

for {set i 0} {$i <= 2} {incr i} {

  # Create fifo_generator
  cell xilinx.com:ip:fifo_generator:13.1 fifo_generator_$i {
    PERFORMANCE_OPTIONS First_Word_Fall_Through
    INPUT_DATA_WIDTH 64
    INPUT_DEPTH 1024
    OUTPUT_DATA_WIDTH 32
    OUTPUT_DEPTH 2048
    READ_DATA_COUNT true
    READ_DATA_COUNT_WIDTH 12
  } {
    clk /ps_0/FCLK_CLK0
    srst slice_2/Dout
  }

  # Create axis_fifo
  cell pavel-demin:user:axis_fifo:1.0 fifo_[expr $i + 2] {
    S_AXIS_TDATA_WIDTH 64
    M_AXIS_TDATA_WIDTH 32
  } {
    S_AXIS bcast_5/M0${i}_AXIS
    FIFO_READ fifo_generator_$i/FIFO_READ
    FIFO_WRITE fifo_generator_$i/FIFO_WRITE
    aclk /ps_0/FCLK_CLK0
  }

  # Create axi_axis_reader
  cell pavel-demin:user:axi_axis_reader:1.0 reader_$i {
    AXI_DATA_WIDTH 32
  } {
    S_AXIS fifo_[expr $i + 2]/M_AXIS
    aclk /ps_0/FCLK_CLK0
    aresetn /rst_0/peripheral_aresetn
  }

}
